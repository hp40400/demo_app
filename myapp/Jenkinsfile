node {

  properties([pipelineTriggers([pollSCM('*/1 * * * *')]),disableConcurrentBuilds()])

  stage('Init') {
    checkout scm

    //Service specific vars
    service_name = "demo-service"
    kubernetes_cluster_name = "Demo-EKS"

    //Common vars
    GIT_COMMIT = sh(script: "git rev-parse HEAD", returnStdout: true).trim()
    account = sh(script: "/usr/local/bin/aws sts get-caller-identity --query Account --output text", returnStdout: true).trim()
    SHORT_COMMIT = "${GIT_COMMIT[0..7]}"
    echo "git commit is ${GIT_COMMIT}"
   // account_alias = sh(script: "aws iam list-account-aliases --query AccountAliases --output text", returnStdout: true).trim()
    region = "us-west-2"
    ecr_repoName = "${account}.dkr.ecr.${region}.amazonaws.com/${service_name}"

  }

  stage('Image Build') {
    dir("myapp") {
    echo "${ecr_repoName}"
     sh "docker build -f ./Dockerfile -t ${ecr_repoName}:${SHORT_COMMIT} ."
     sh "docker tag ${ecr_repoName}:${SHORT_COMMIT} ${ecr_repoName}:latest"
    // sh "sed -i 's|IMAGENAME|${ecr_repoName}:${SHORT_COMMIT}|g' ../helm/values.yaml"
    }
  }


    stage('Tests') {

        echo "Tests are PASSED"

    }

  

  stage('Image Push') {
    script {
      try {
        sh "aws ecr batch-delete-image --repository-name ${service_name} --image-ids imageTag=${SHORT_COMMIT} --region ${region}"
      } catch (err) {
        currentBuild.result = 'SUCCESS'
      }
      echo "Build number is ${SHORT_COMMIT}"
      sh "aws ecr batch-delete-image --repository-name ${service_name} --image-ids imageTag=latest --region ${region}"
      //sh "aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${ecr_repoName})'
      sh "aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${ecr_repoName}"
     // sh "`aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${ecr_repoName}` && docker push ${ecr_repoName}:latest"
     // sh "set +x && `aws ecr get-login-password --region ${region} | docker login --username AWS --password-stdin ${ecr_repoName}` && set -x && docker push ${ecr_repoName}:${SHORT_COMMIT}"
      sh "docker push ${ecr_repoName}:latest"
      sh "docker push ${ecr_repoName}:${SHORT_COMMIT}"
      sh "docker image rm ${ecr_repoName}:latest"
      sh "docker image rm ${ecr_repoName}:${SHORT_COMMIT}"
      
    }
  }



  stage("Deploy") {
    script {
      catchError {
       dir("helm") {
        sh 'ssh root@54.87.185.236 "docker stop myapp" || true'
        sh 'ssh root@54.87.185.236 "docker rm myapp" || true'
        sh 'ssh root@54.87.185.236 "docker run -d -p 80:80 --name myapp 719546976213.dkr.ecr.us-west-2.amazonaws.com/demo-service:latest"'
        // sh "aws eks update-kubeconfig --region ${region} --name ${kubernetes_cluster_name}"
        // sh "helm upgrade --install $service_name ."
        // sh 'sleep 10'
        // sh "kubectl get ingress -n 2048-game"
       }
     }
     echo currentBuild.result
   }
 }

}
